package levels.ldtk;

import openfl.utils.AssetType;
import openfl.Assets;
import flixel.FlxObject;
import entities.interact.Tunnel;
import types.Direction;
import entities.interact.Slingshot;
import entities.interact.Popper;
import entities.Flipper;
import flixel.FlxSprite;
import entities.CameraTransition;
import flixel.math.FlxRect;
import flixel.math.FlxPoint;
import levels.ldtk.Ldtk.LdtkProject;

using levels.ldtk.LdtkUtils;

/**
 * The middle layer between LDTK project and game code. This class
 * should do all of the major parsing of project data into flixel
 * types and basic game objects.
**/
class Level {
	public static var project = new LdtkProject();

	/**
	 * World id that this level was loaded from
	**/
	public var worldID:String;

	public var world:Ldtk.Ldtk_World;

	/**
	 * The raw level from the project. Available to get any needed
	 * one-off values out of the level for special use-cases
	**/
	public var rawLevels:Array<Ldtk.Ldtk_Level> = [];

	public var levelBgs:Array<FlxSprite> = [];
	public var levelFgs:Array<FlxSprite> = [];
	public var levelTops:Array<FlxSprite> = [];

	// This is the painted image for the level itself
	public var terrainRender:Array<FlxSprite> = [];

	public var terrainLayers:Array<BDTilemap> = [];
	public var spawnPoint:FlxPoint = FlxPoint.get();

	public var camZones = new Map<String, FlxRect>();
	public var focusZones = new Array<FlxObject>();
	public var camTransitions = new Array<CameraTransition>();

	public var flippers:Array<Flipper> = [];
	public var poppers:Array<Popper> = [];
	public var slingshots:Array<Slingshot> = [];
	public var tunnels:Array<Tunnel> = [];

	public function new(worldNameOrIID:String, nameOrIID:String) {
		this.worldID = worldNameOrIID;
		for (w in project.worlds) {
			if (w.identifier == worldNameOrIID || w.iid == worldNameOrIID) {
				world = w;
			}
		}
		if (world == null) {
			// TODO: how to handle?
			throw('no world with name/IID: $worldNameOrIID');
		}

		// We are loading each world as a full "level" in terms of gameplay.
		// So we load every level in the world file and stitch them all together
		for (raw in world.levels) {
			rawLevels.push(raw);

			// TODO: Make sure these match the paths generated by the aseprite files, once they exist
			var bgPath = 'assets/aseprite/backgrounds/${world.identifier}_${raw.identifier}_bg.png';
			var fgPath = 'assets/aseprite/backgrounds/${world.identifier}_${raw.identifier}_fg.png';
			if (Assets.exists(bgPath, AssetType.IMAGE)) {
				var bgSprite = new FlxSprite(raw.worldX, raw.worldY, bgPath);
				levelBgs.push(bgSprite);
			} else {
				trace('not found: $bgPath');
			}
			if (Assets.exists(fgPath, AssetType.IMAGE)) {
				var fgSprite = new FlxSprite(raw.worldX, raw.worldY, fgPath);
				levelFgs.push(fgSprite);
			} else {
				trace('not found: $fgPath');
			}

			var autoTileLayer = new BDTilemap();
			autoTileLayer.loadLdtk(raw.l_AutoLayer_baked);
			autoTileLayer.setPosition(raw.worldX, raw.worldY);
			terrainLayers.push(autoTileLayer);

			var terrainLayer = new BDTilemap();
			terrainLayer.loadLdtk(raw.l_Terrain);
			terrainLayer.setPosition(raw.worldX, raw.worldY);
			terrainLayers.push(terrainLayer);

			if (raw.l_Objects.all_Spawn.length > 0) {
				var sp = raw.l_Objects.all_Spawn[0];
				spawnPoint.set(sp.worldPixelX, sp.worldPixelY);
			}

			parseCameraZones(raw.l_Objects.all_CameraZone);
			parseCameraTransitions(raw.l_Objects.all_CameraTransition);
			parseFlippers(raw.l_Objects.all_FlipperLeft, raw.l_Objects.all_FlipperRight);
			parsePoppers(raw.l_Objects.all_Popper, raw.l_Objects.all_SmallPopper);
			parseSlingshots(raw.l_Objects.all_Slingshot_Left, raw.l_Objects.all_Slingshot_Right);
			parseTunnels(raw.l_Objects.all_Tunnel);
		}
	}

	function parseCameraZones(zoneDefs:Array<Ldtk.Entity_CameraZone>) {
		for (z in zoneDefs) {
			if (z.f_AutoFocus) {
				focusZones.push(new FlxObject(z.worldPixelX, z.worldPixelY, z.width, z.height));
			} else {
				camZones.set(z.iid, FlxRect.get(z.worldPixelX, z.worldPixelY, z.width, z.height));
			}
		}
	}

	function parseCameraTransitions(areaDefs:Array<Ldtk.Entity_CameraTransition>) {
		camTransitions = new Array<CameraTransition>();
		for (def in areaDefs) {
			var transArea = FlxRect.get(def.worldPixelX, def.worldPixelY, def.width, def.height);
			var camTrigger = new CameraTransition(transArea);
			for (i in 0...def.f_Directions.length) {
				camTrigger.addGuideTrigger(def.f_Directions[i], camZones.get(def.f_Zones[i].entityIid));
			}
			camTransitions.push(camTrigger);
		}
	}

	function parseFlippers(leftDefs:Array<Ldtk.Entity_FlipperLeft>, rightDefs:Array<Ldtk.Entity_FlipperRight>) {
		for (ld in leftDefs) {
			var f = new Flipper(LEFT, ld.worldPixelX, ld.worldPixelY, 80, 13, 8, 30, 30 - ld.f_Travel, ld.f_Mass);
			flippers.push(f);
		}
		for (rd in rightDefs) {
			var f = new Flipper(RIGHT, rd.worldPixelX, rd.worldPixelY, 80, 13, 8, 150, 150 + rd.f_Travel, rd.f_Mass);
			flippers.push(f);
		}
	}

	function parsePoppers(popperDefs:Array<Ldtk.Entity_Popper>, smallPopDefs:Array<Ldtk.Entity_SmallPopper>) {
		for (pd in popperDefs) {
			poppers.push(new Popper(pd.worldPixelX, pd.worldPixelY, 1000, 75));
		}
	}

	function parseSlingshots(leftDefs:Array<Ldtk.Entity_Slingshot_Left>, rightDefs:Array<Ldtk.Entity_Slingshot_Right>) {
		for (ld in leftDefs) {
			slingshots.push(new Slingshot(ld.worldPixelX, ld.worldPixelY, 750, Direction.RIGHT, 0));
		}

		for (rd in rightDefs) {
			slingshots.push(new Slingshot(rd.worldPixelX, rd.worldPixelY, 750, Direction.LEFT, 0));
		}
	}

	function parseTunnels(tunnelDefs:Array<Ldtk.Entity_Tunnel>) {
		for (td in tunnelDefs) {
			var tunnel = new Tunnel(td.worldPixelX, td.worldPixelY);
			tunnel.IID = td.iid;
			tunnels.push(tunnel);
		}

		for (td in tunnelDefs) {
			if (td.f_Exit == null) {
				continue;
			}

			var entrance:Tunnel = null;
			var exit:Tunnel = null;
			for (tun in tunnels) {
				if (tun.IID == td.iid) {
					entrance = tun;
				}

				if (tun.IID == td.f_Exit.entityIid) {
					exit = tun;
				}

				if (entrance != null && exit != null) {
					break;
				}
			}

			if (entrance != null && exit != null) {
				entrance.exit = exit;
			}
		}
	}
}
